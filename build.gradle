/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */
buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
	}
}
plugins {
	id 'eclipse'
	id 'java'
	id 'application'	
	id 'maven-publish'
	id 'signing'
	id 'io.codearte.nexus-staging' version '0.30.0'
	id 'com.github.jk1.dependency-license-report' version '1.17'
	id 'com.github.johnrengelman.shadow' version '5.0.0'
}
import com.github.jk1.license.render.*
import com.github.jk1.license.importer.*
licenseReport {
	// Set output directory for the report data.
	// Defaults to ${project.buildDir}/reports/dependency-license.
	outputDir = "$projectDir/build/licenses"

	// Adjust the configurations to fetch dependencies. Default is 'runtimeClasspath'
	// For Android projects use 'releaseRuntimeClasspath' or 'yourFlavorNameReleaseRuntimeClasspath'
	// Use 'ALL' to dynamically resolve all configurations:
	// configurations = ALL
	configurations = ['runtimeClasspath']


	// List the ids (in module:name format) to exclude from dependency report. Supports regular expressions.
	// By default excludes is empty.
	excludes = ['moduleGroup:moduleName']

	// Don't include artifacts of project's own group into the report
	excludeOwnGroup = false

	// Don't exclude bom dependencies.
	// If set to true, then all boms will be excluded from the report
	excludeBoms = false

	// Set custom report renderer, implementing ReportRenderer.
	// Yes, you can write your own to support any format necessary.
	renderers = [new XmlReportRenderer('third-party-libs.xml', 'Back-End Libraries'), new CsvReportRenderer('third-party-libs.csv')]

}
repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
}

dependencies {
	// Use JUnit test framework.
	testImplementation 'junit:junit:4.13.2'
}
if(JavaVersion.current() != JavaVersion.VERSION_1_8){
	throw new GradleException("This build must be run with java 8")
}


group='com.neuronrobotics'
archivesBaseName='bowler-game'
version = System.getenv("VERSION_SEMVER")

nexusStaging {
	packageGroup = 'com.neuronrobotics' 
	serverUrl='https://oss.sonatype.org/service/local/'
	username = System.getenv("MAVEN_USERNAME")
	password = System.getenv("MAVEN_PASSWORD")
}

publishing {

	repositories {
//		maven {
//			name = 'GitHubPackages'
//			url = uri("https://maven.pkg.github.com/CommonWealthRobotics/BowlerGame")
//			credentials {
//				username = System.getenv("GITHUB_ACTOR")
//				password = System.getenv("GITHUB_TOKEN")
//			}
//		}
		maven {
			name = "OSSRH"
			url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			credentials {
				username = System.getenv("MAVEN_USERNAME")
				password = System.getenv("MAVEN_PASSWORD")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			from components.java
			pom {
				name= 'Bowler Game Engine'
				packaging ='jar'
				// optionally artifactId can be defined here
				description ='Bowler Game Engine based on JavaFX and BowlerStudio'
				url= 'http://github.com:CommonWealthRobotics/BowlerGame'

				scm {
					connection 			='scm:git:https://github.com/CommonWealthRobotics/BowlerGame'
					developerConnection ='scm:git:git@github.com:CommonWealthRobotics/BowlerGame.git'
					url ='https://github.com/CommonWealthRobotics/BowlerGame'
				}

				licenses {
					license {
						name= 'The Apache License, Version 2.0'
						url ='http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id ='madhephaestus'
						name= 'Kevin Harrington'
						email= 'kharrington@neuronrobotics.com'
					}
				}
			}
		}
	}
}

java {
	withJavadocJar()
	withSourcesJar()
}

signing {
	sign publishing.publications.mavenJava
}


javadoc {
	if(JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}

shadowJar {
	zip64 true
   mainClassName = 'com.commonwealthrobotics.ui.Main'
   baseName = 'BowlerGame'
   classifier = ""
   archiveVersion = ""
   mergeServiceFiles()
}

